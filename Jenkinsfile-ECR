@Library('my-shared-library@main') _
pipeline{
    agent any
    
    parameters{
        choice(name: 'action', choices: 'create\ndelete', description:'Choose Create/Destroy')
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '373909246822')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'us-east-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'santoshtidke')
    }

    environment {
        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
    }

    stages{

        stage('Git Checkout'){
            when { expression { params.action == 'create' } }
            steps{
                gitCheckout(
                    branch: "main",
                    url: "https://github.com/AdvanceCodeMarshall/mrdevops_java_app.git"
                )
            }
        }
        // stage('Unit Test maven'){
        //     when { expression { params.action == 'create' } }
        //     steps{
        //         script{
        //             mvnTest()
        //         }
        //     }
        // }
        // stage('Integeration Test maven'){
        //     when { expression { params.action == 'create' } }
        //     steps{
        //         script{
        //             mvnIntegerationTest()
        //         }
        //     }
        // }
        // stage('Static Code Analysis : Sonarqube'){
        //     when { expression { params.action == 'create' } }
        //     steps{
        //         script{
        //             def SonarQubecredentialsId = 'sonarqube-api'
        //             staticCodeAnalysis(SonarQubecredentialsId)
        //         }
        //     }
        // }
        // stage('Quality Gate Status Check : Sonarqube'){
        //     when { expression { params.action == 'create' } }
        //     steps{
        //         script{
        //             def SonarQubecredentialsId = 'sonarqube-api'
        //             qualityGateStatus(SonarQubecredentialsId)
        //         }
        //     }
        // }
        // stage('Maven Build : maven'){
        //     when { expression { params.action == 'create' } }
        //     steps{
        //         script{
        //             mvnBuild()
        //         }
        //     }
        // }
        // stage('Docker Image Build : ECR'){
        //     when { expression { params.action == 'create' } }
        //     steps{
        //         script{
        //             dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
        //         }
        //     }
        // }
        // stage('Docker Image Scan: Trivy'){
        //     when { expression { params.action == 'create' } }
        //     steps{
        //         script{
        //             dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
        //         }
        //     }
        // }
        // stage('Docker Image Push: ECR'){
        //     when { expression { params.action == 'create' } }
        //     steps{
        //         script{
        //             dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
        //         }
        //     }
        // }
        // stage('Docker Image Cleanup: ECR'){
        //     when { expression { params.action == 'create' } }
        //     steps{
        //         script{
        //             dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
        //         }
        //     }
        // }

        stage('Create Cluster using terraform : EKS'){
            when { expression { params.action == 'create' } }
            steps{
                script{
                    dir('terraform-eks') {
                        sh """
                            terraform init
                            terraform plan -var 'aws_access_key=$ACCESS_KEY' -var 'aws_secret_key=$SECRET_KEY' -var 'region=${params.Region}' --var-file=./config/terraform.tfvars
                            terraform apply -var 'aws_access_key=$ACCESS_KEY' -var 'aws_secret_key=$SECRET_KEY' -var 'region=${params.Region}' --var-file=./config/terraform.tfvars --auto-approve
                        """
                    }
                }
            }
        }


    }
}